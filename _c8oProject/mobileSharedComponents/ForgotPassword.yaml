scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        import { AbstractControl, ValidatorFn } from ''@angular/forms'';
        
        export default class Validation {
          static match(controlName: string, checkControlName: string): ValidatorFn {
            return (controls: AbstractControl) => {
              const control = controls.get(controlName);
              const checkControl = controls.get(checkControlName);
        
              if (checkControl?.errors && !checkControl.errors[''matching'']) {
                return null;
              }
        
              if (control?.value !== checkControl?.value) {
                controls.get(checkControlName)?.setErrors({ matching: true });
                return { matching: true };
              } else {
                return null;
              }
            };
          }
        }
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		this.local.showPass = false;
        		this.local.showPass2 = false;
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/		
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompDoCheck*/
        		/*End_c8o_CompDoCheck*/
        /*Begin_c8o_CompAfterContentInit*/
        		
        		/*End_c8o_CompAfterContentInit*/
        /*Begin_c8o_CompAfterContentChecked*/
        		/*End_c8o_CompAfterContentChecked*/
        /*Begin_c8o_CompAfterViewInit*/
        	    //set validator password match
        	    setTimeout(()=>{
        			this.formResetPassword.form.addValidators(Validation.match(''newPassword'', ''newPassword2''))
        		},0)
        	    
        		/*End_c8o_CompAfterViewInit*/
        /*Begin_c8o_CompAfterViewChecked*/
        		/*End_c8o_CompAfterViewChecked*/
        /*Begin_c8o_CompFunction*/
        	
        	
          public f(key){
        	  try{
        		  if(this.formResetPassword.form.get(key).errors){
        			  return Object.keys(this.formResetPassword.form.get(key).errors);
        		  }
        		  else{
        			  return [];
        		  }
        		  
        	  }
        	  catch(e){
        		  console.log("error", e)
        	  }
        	  
          }
          public f2(){
        	  try{
        		  if(this.formResetPassword.form.errors){
        			  return true;
        		  }
        		  else{
        			  return false;
        		  }
        		  return 
        	  }
        	  catch(e){
        		  console.log("error", e)
        	  }
        	  
          }
        	/*End_c8o_CompFunction*/
        '
↓Grid [ngx.components.UIDynamicElement-1582132056407]: 
  beanData: '{"ionBean":"Grid"}'
  tagName: ion-grid
  ↓GridRow [ngx.components.UIDynamicElement-1582132064920]: 
    beanData: '{"ionBean":"GridRow","FlexAlignement":"plain:ion-align-items-center"}'
    tagName: ion-row
    ↓GridCol1 [ngx.components.UIDynamicElement-1582132108331]: 
      beanData: '{"ionBean":"GridCol"}'
      tagName: ion-col
    ↓GridCol [ngx.components.UIDynamicElement-1582132068962]: 
      beanData: |
        '{
         "ionBean": "GridCol",
         "SizeLg": "plain:10",
         "SizeMd": "plain:11",
         "SizeSm": "plain:12",
         "SizeXl": "plain:6",
         "SizeXs": "plain:12"
        }'
      tagName: ion-col
      ↓CardContainer [ngx.components.UIDynamicElement-1582132177311]: 
        beanData: '{"ionBean":"Card"}'
        tagName: ion-card
        ↓CardHeader [ngx.components.UIDynamicElement-1582132611011]: 
          beanData: '{"ionBean":"CardHeader"}'
          tagName: ion-card-header
          ↓Div [ngx.components.UIDynamicElement-1674756204410]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Style [ngx.components.UIStyle-1674756209613]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '	display: flex;
                      	align-items: center;
                      '
            ↓LazyImage [ngx.components.UIDynamicElement-1674756146215]: 
              beanData: '{"ionBean":"LazyImage","Src":"source:{\"filter\":\"Asset\",\"project\":\"lib_UserManager_ui_ngx\",\"input\":\"\",\"model\":{\"data\":[{\"asset\":\"''assets\\\/logo_convertigo_blue.svg''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}"}'
              tagName: ion-img
              ↓Style [ngx.components.UIStyle-1674756170788]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '	height:28px;
                        	width: 90px;
                        	margin-right: 15px;
                        '
            ↓H1 [ngx.components.UIDynamicElement-1674727989850]: 
              beanData: '{"ionBean":"Heading1"}'
              tagName: h1
              ↓Text [ngx.components.UIText-1582132626102]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Password reset
              ↓FontStyle [ngx.components.UIFontStyle-1674728086768]: 
                fontFamily: Open Sans
                fontStyle: normal
                fontWeight: 700
                ruleTargets: class1674727989850
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'font-family: "Open Sans";
                        font-style: normal;
                        font-weight: 700;
                        '
        ↓CardContent [ngx.components.UIDynamicElement-1582132655202]: 
          beanData: '{"ionBean":"CardContent"}'
          tagName: ion-card-content
          ↓FormatLayout [ngx.components.UIDynamicAttr-1614349065720]: 
            beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-right"}'
            comment: FormatLayout
            tagName: div
          ↓Div [ngx.components.UIDynamicElement-1674756998006]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Paragraph [ngx.components.UIDynamicElement-1674756730426]: 
              beanData: '{"ionBean":"Paragraph"}'
              tagName: p
              ↓Text [ngx.components.UIText-1674756730425]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'plain:You have requested, or it is necessary to reset your password for the application: '
              ↓Span [ngx.components.UIDynamicElement-1674757068421]: 
                beanData: '{"ionBean":"SpanTag"}'
                tagName: span
                ↓Text1 [ngx.components.UIText-1674756876011]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.appName
                ↓FontStyle [ngx.components.UIFontStyle-1674757080215]: 
                  fontFamily: Open Sans
                  fontSize: 20px
                  fontStyle: normal
                  fontWeight: 700
                  ruleTargets: class1674757068421
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          'font-family: "Open Sans";
                          font-size: 20px;
                          font-style: normal;
                          font-weight: 700;
                          '
                ↓Style [ngx.components.UIStyle-1674757143285]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	color: var(--ion-color-primary);
                          '
            ↓Paragraph1 [ngx.components.UIDynamicElement-1674756913270]: 
              beanData: '{"ionBean":"Paragraph"}'
              tagName: p
              ↓Text [ngx.components.UIText-1674756913273]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'plain: Please enter a new password and then click on the change password button'
            ↓FormatLayout [ngx.components.UIDynamicAttr-1674757015434]: 
              beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-left"}'
              comment: FormatLayout
              tagName: div
            ↓Style [ngx.components.UIStyle-1674757033372]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '	padding-bottom: 50px;
                      '
          ↓Form [ngx.components.UIForm-1674735026782]: 
            identifier: formResetPassword
            ↓Event [ngx.components.UIControlEvent-1674735026779]: 
              attrName: (ngSubmit)
              eventName: onSubmit
              ↓CallSequenceForgotPassword [ngx.components.UIDynamicAction-1582131809577]: 
                beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:lib_UserManager.ForgotPassword"}'
                ↓passwordResetKey [ngx.components.UIControlVariable-1582131832026]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: source:{"filter":"Shared","project":"lib_UserManager_ui_ngx","input":"","model":{"data":[{"priority":1582131761883,"regular":true}],"path":"?.resetKey","prefix":"","suffix":"","custom":"","useCustom":false}}
                ↓newPassword [ngx.components.UIControlVariable-1582131832028]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: source:{"filter":"Local","project":"lib_UserManager_ui_ngx","input":"","model":{"data":[{"localObject":"local"}],"path":"","prefix":"","suffix":"?.newPassword","custom":"","useCustom":false}}
                ↓IfElse [ngx.components.UIDynamicIf-1582133961826]: 
                  beanData: '{"ionBean":"IfElseAction","condition":"script:out.error"}'
                  ↓Toast [ngx.components.UIDynamicAction-1582132870535]: 
                    beanData: |
                      '{
                       "ionBean": "ToastAction",
                       "message": "script:stack[''CallSequenceForgotPassword''].out.error.message",
                       "position": "plain:top"
                      }'
                  ↓EmitEvent [ngx.components.UIDynamicEmit-1631708897887]: 
                    beanData: |
                      '{
                       "ionBean": "EmitEventAction",
                       "event": "plain:lib_UserManager_ui_ngx.MobileApplication.Application.ForgotPassword.PasswordChangedError",
                       "data": "script:stack[''CallSequenceForgotPassword''].out.error.message"
                      }'
                  ↓PublishEventError [ngx.components.UIDynamicAction-1582134121924]: 
                    beanData: |
                      '{
                       "ionBean": "PublishEventAction",
                       "topic": "plain:lib_UserManager.PasswordChangedError",
                       "data": "script:stack[''CallSequenceForgotPassword''].out.error.message"
                      }'
                  ↓Else_Handler [ngx.components.UIActionElseEvent-1582134040398]: 
                    ↓Toast [ngx.components.UIDynamicAction-1582134044012]: 
                      beanData: |
                        '{
                         "ionBean": "ToastAction",
                         "message": "plain:Password has been sucessfully changed...",
                         "position": "plain:top"
                        }'
                    ↓EmitEvent [ngx.components.UIDynamicEmit-1631708897891]: 
                      beanData: |
                        '{
                         "ionBean": "EmitEventAction",
                         "event": "plain:lib_UserManager_ui_ngx.MobileApplication.Application.ForgotPassword.PasswordChangedOk",
                         "data": "plain:"
                        }'
                    ↓PublishEventOk [ngx.components.UIDynamicAction-1582134346261]: 
                      beanData: |
                        '{
                         "ionBean": "PublishEventAction",
                         "topic": "plain:lib_UserManager.PasswordChangedOk",
                         "data": "plain:"
                        }'
            ↓divErrors1 [ngx.components.UIDynamicElement-1674754455664]: 
              beanData: '{"ionBean":"DivTag"}'
              tagName: div
              ↓Directive [ngx.components.UIControlDirective-1674754055146]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:f('newPassword')
                ↓Directive [ngx.components.UIControlDirective-1674754286551]: 
                  directiveItemName: item
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:f('newPassword')
                  ↓Directive1 [ngx.components.UIControlDirective-1674754501805]: 
                    directiveName: If
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:item == 'required'
                    ↓Text [ngx.components.UIText-1674754259163]: 
                      i18n: true
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:* This field is required
                  ↓Directive2 [ngx.components.UIControlDirective-1674754584148]: 
                    directiveName: If
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:item == 'minlength'
                    ↓Text1 [ngx.components.UIText-1674754710827]: 
                      i18n: true
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:* Password must contain at least 8 characters
              ↓Style [ngx.components.UIStyle-1674754748661]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '	color: var(--ion-color-danger);
                        	padding-left: 16px;
                        	min-height: 21px;
                        '
              ↓FormatLayout [ngx.components.UIDynamicAttr-1674754887063]: 
                beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-left"}'
                selfClose: false
            ↓FormItem [ngx.components.UIDynamicElement-1582131880184]: 
              beanData: '{"ionBean":"FormItem","Lines":"plain:inset"}'
              tagName: ion-item
              ↓Label [ngx.components.UIDynamicElement-1582131889192]: 
                beanData: '{"ionBean":"Label","Position":"plain:floating"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1582131906201]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:New password
              ↓TextInput [ngx.components.UIDynamicElement-1582131898221]: 
                beanData: |
                  '{
                   "ionBean": "Input",
                   "ControlName": "plain:newPassword",
                   "DoubleBinding": "plain",
                   "Debounce": "plain:0",
                   "Min": "plain:8",
                   "MinLength": "plain:8",
                   "Required": "plain:true",
                   "Type": "script:local.showPass === true ? ''text'' : ''password''"
                  }'
                tagName: ion-input
              ↓Icon [ngx.components.UIDynamicElement-1674735539482]: 
                beanData: |
                  '{
                   "ionBean": "Icon",
                   "IconName": "script:this.local.showPass ? ''eye-off-outline'' : ''eye-outline''",
                   "IconSlot": "plain:end"
                  }'
                tagName: ion-icon
                ↓Event [ngx.components.UIControlEvent-1674735539485]: 
                  ↓changeTypePassword [ngx.components.UICustomAsyncAction-1674735539488]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            		try {
                            			this.local.showPass = !this.local.showPass
                            		} catch (e) {
                            		
                            		} finally {
                            			return;
                            		}
                            
                ↓Style [ngx.components.UIStyle-1674735825300]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '    margin-top: auto;
                          '
            ↓divErrors2 [ngx.components.UIDynamicElement-1674755093261]: 
              beanData: '{"ionBean":"DivTag"}'
              tagName: div
              ↓Directive [ngx.components.UIControlDirective-1674755093264]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:f('newPassword')
                ↓Directive [ngx.components.UIControlDirective-1674755093267]: 
                  directiveItemName: item
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:f('newPassword')
                  ↓Directive1 [ngx.components.UIControlDirective-1674755093270]: 
                    directiveName: If
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:item == 'required'
                    ↓Text [ngx.components.UIText-1674755093273]: 
                      i18n: true
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:* This field is required
                  ↓Directive2 [ngx.components.UIControlDirective-1674755093276]: 
                    directiveName: If
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:item == 'minlength'
                    ↓Text1 [ngx.components.UIText-1674755093279]: 
                      i18n: true
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:* Password must contain at least 8 characters
              ↓Style [ngx.components.UIStyle-1674755093282]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '	color: var(--ion-color-danger);
                        	padding-left: 16px;
                        	min-height: 42px;
                        	padding-top: 21px;
                        '
              ↓FormatLayout [ngx.components.UIDynamicAttr-1674755093285]: 
                beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-left"}'
                selfClose: false
              ↓Directive1 [ngx.components.UIControlDirective-1674755396797]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:f2()
                ↓Text [ngx.components.UIText-1674755410546]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:* Both passwords must be the same
            ↓FormItem1 [ngx.components.UIDynamicElement-1674734906863]: 
              beanData: '{"ionBean":"FormItem","Lines":"plain:inset"}'
              tagName: ion-item
              ↓Label [ngx.components.UIDynamicElement-1674734906866]: 
                beanData: '{"ionBean":"Label","Position":"plain:floating"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1674734906869]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:Confirm new password
              ↓TextInput [ngx.components.UIDynamicElement-1674734906872]: 
                beanData: |
                  '{
                   "ionBean": "Input",
                   "ControlName": "plain:newPassword2",
                   "DoubleBinding": "plain",
                   "Debounce": "plain:0",
                   "Required": "plain:true",
                   "Type": "script:local.showPass2 === true ? ''text'' : ''password''"
                  }'
                tagName: ion-input
              ↓Icon [ngx.components.UIDynamicElement-1674735913765]: 
                beanData: |
                  '{
                   "ionBean": "Icon",
                   "IconName": "script:this.local.showPass2 ? ''eye-off-outline'' : ''eye-outline''",
                   "IconSlot": "plain:end"
                  }'
                tagName: ion-icon
                ↓Event [ngx.components.UIControlEvent-1674735913768]: 
                  ↓changeTypePassword [ngx.components.UICustomAsyncAction-1674735913771]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            		try {
                            			this.local.showPass2 = !this.local.showPass2
                            		} catch (e) {
                            		
                            		} finally {
                            			return;
                            		}
                            
                ↓Style [ngx.components.UIStyle-1674735913774]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '    margin-top: auto;
                          '
            ↓SubmitButton [ngx.components.UIDynamicElement-1582131936060]: 
              beanData: '{"ionBean":"SubmitButton"}'
              tagName: ion-button
              ↓Text [ngx.components.UIText-1582132148562]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Change Password
              ↓Style [ngx.components.UIStyle-1674755855463]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '/**
                         * Custom properties (sometimes referred to as CSS variables or cascading variables)
                         * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                         * They are set using custom property notation, e.g.: --main-color: black;
                         * and are accessed using the var() function, e.g.: color: var(--main-color);
                         * You can find below your component''s properties you can customize within the page.
                         * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                         * For more informations see https://ionicframework.com/docs/theming.
                        **/
                        //--background	//Background of the button
                        //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                        //--background-activated-opacity	//Opacity of the button when pressed
                        //--background-focused	//Background of the button when focused with the tab key
                        //--background-focused-opacity	//Opacity of the button when focused with the tab key
                        //--background-hover	//Background of the button on hover
                        //--background-hover-opacity	//Opacity of the background on hover
                        //--border-color	//Border color of the button
                        //--border-radius	//Border radius of the button
                        //--border-style	//Border style of the button
                        //--border-width	//Border width of the button
                        //--box-shadow	//Box shadow of the button
                        //--color	//Text color of the button
                        //--color-activated	//Text color of the button when pressed
                        //--color-focused	//Text color of the button when focused with the tab key
                        //--color-hover	//Text color of the button when hover
                        //--opacity	//Opacity of the button
                        //--padding-bottom	//Bottom padding of the button
                        //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                        //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                        //--padding-top	//Top padding of the button
                        //--ripple-color	//Color of the button ripple effect
                        //--transition	//Transition of the button
                        margin-top: 42px;
                        '
    ↓GridCol2 [ngx.components.UIDynamicElement-1582132111143]: 
      beanData: '{"ionBean":"GridCol"}'
      tagName: ion-col
↓PasswordChangedError [ngx.components.UICompEvent-1631708897885]: 
  attrName: PasswordChangedError
↓PasswordChangedOk [ngx.components.UICompEvent-1631708897889]: 
  attrName: PasswordChangedOk
↓resetKey [ngx.components.UICompVariable-1674727320418]: 
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1674741472918]: 
  ↓CustomAsyncAction [ngx.components.UICustomAsyncAction-1674741478564]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		try {
            			debugger;
            			page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            '
↓appName [ngx.components.UICompVariable-1674756888627]: 